
subscription-manager register
subscription-manager attach --pool=8a85f98c63842fef016398f600d8029d

ftp_proxy="http://192.168.56.85:3128"

Prerequisitos de Instalacion
-------------------------------
Servidores: k8smaster01|k8sworker01|k8sworker02|k8sloadbalancer01
Agregar al archivo Host
Archivo: /etc/hosts

192.168.56.185 s00dlxck8s005.sunat.peru s00dlxck8s005
192.168.56.186 s00dlxwk8s006.sunat.peru s00dlxwk8s006
192.168.56.187 s00dlxak8s013.sunat.peru s00dlxak8s013
192.168.56.188 s00dlxak8s014.sunat.peru s00dlxak8s014

Instalacion de Container Runtimes
------------------------------------
Servidores: k8smaster01|k8sworker01|k8sworker02
Docker version 18.09.8, build 0dd43dd87f

# Install Docker CE
## Set up the repository
### Install required packages.
yum install yum-utils device-mapper-persistent-data lvm2

### Add Docker repository.
yum-config-manager \
  --add-repo \
  https://download.docker.com/linux/centos/docker-ce.repo

## Install Docker CE.
yum update && yum install docker-ce-18.06.2.ce

## Create /etc/docker directory.
mkdir /etc/docker

# Setup daemon.
cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF

mkdir -p /etc/systemd/system/docker.service.d

# Configuramos el proxy de desarrollo para descargar las imagenes del kubeproxy
vi /lib/systemd/system/docker.service

[Service]
Type=notify
# the default is not to use systemd for cgroups because the delegate issues still
# exists and systemd currently does not support the cgroup feature set required
# for containers run by docker

Environment="http_proxy=http://192.168.56.85:3128"
Environment="https_proxy=http://192.168.56.85:3128"

ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
ExecReload=/bin/kill -s HUP $MAINPID
TimeoutSec=0
RestartSec=2
Restart=always

# Restart Docker
systemctl daemon-reload
systemctl restart docker
systemctl status docker

Configuraciones recomendadas
-----------------------------
Servidores: k8smaster01|k8sworker01|k8sworker02

# Disable SELinux
setenforce 0
sed -i --follow-symlinks 's/^SELINUX=enforcing/SELINUX=disabled/' /etc/sysconfig/selinux

# Disable Firewall
systemctl disable firewalld
systemctl stop firewalld

# Disable swap
sed -i '/swap/d' /etc/fstab
swapoff -a

# Update sysctl settings for Kubernetes networking
cat >>/etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system

Instalacion de Kubernetes
-----------------------------
Servidores: k8smaster01|k8sworker01|k8sworker02
Kubernetes v1.15.1

# Agregamos Repositorio
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

# Instalamos kubernetes
yum install kubeadm kubelet kubectl
systemctl enable kubelet
systemctl start kubelet

Instalacion del Master
-------------------------------
Servidores: k8smaster01

# Inicializamos 
# kubeadm init --apiserver-advertise-address=MASTER_IP --pod-network-cidr=10.244.0.0/16
kubeadm init --apiserver-advertise-address=192.168.56.185 --pod-network-cidr=10.244.0.0/16

# Guardamos la salida
###############################################################################################################
W0719 14:39:28.798480    2442 version.go:98] could not fetch a Kubernetes version from the internet: unable to get URL "https://dl.k8s.io/release/stable-1.txt": Get https://dl.k8s.io/release/stable-1.txt: dial tcp: lookup dl.k8s.io on [::1]:53: read udp [::1]:42168->[::1]:53: read: connection refused
W0719 14:39:28.798549    2442 version.go:99] falling back to the local client version: v1.15.1
[init] Using Kubernetes version: v1.15.1
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Activating the kubelet service
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [s00dlxck8s005 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.56.185]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [s00dlxck8s005 localhost] and IPs [192.168.56.185 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [s00dlxck8s005 localhost] and IPs [192.168.56.185 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 38.003942 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.15" in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node s00dlxck8s005 as control-plane by adding the label "node-role.kubernetes.io/master=''"
[mark-control-plane] Marking the node s00dlxck8s005 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: i92iq6.qedrlwzwmw29bny4
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.56.185:6443 --token i92iq6.qedrlwzwmw29bny4 \
    --discovery-token-ca-cert-hash sha256:d9af83b13788994df153e5e9a25bfa79c2d7e99d93b91b61ab51f735a02127f3
###############################################################################################################

# Ejecutamos el siguiente comando en el cluster master
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

export KUBECONFIG=/etc/kubernetes/admin.conf

# Configuramos la red para los Pods
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/62e44c867a2846fefb68bd5f178daf4da3095ccb/Documentation/kube-flannel.yml

# Validamos que la red de pods esta funcionando valodando si CoreDNS pod esta corriendo antes de a√±adir los nodos worker
kubectl get pods --all-namespaces

# Para ver los tokens disponibles
kubeadm token list

# Por defecto los token caducan despues de 24 horas, para crear uno nuevo ejectutar. La salida de este comando se usara para unir los workers
kubeadm token create --print-join-command

Instalacion del Worker
------------------------------
Servidores: k8sworker01|k8sworker02

# Con la salida del comando anterior
kubeadm join 192.168.56.185:6443 --token debf0g.2kmguv4yurfoi23v     --discovery-token-ca-cert-hash sha256:d9af83b13788994df153e5e9a25bfa79c2d7e99d93b91b61ab51f735a02127f3

Validacion de los nodos del cluster
----------------------------------------
Servidores: k8smaster01

# Get Nodes status
kubectl get nodes
kubectl get nodes -o wide

# Get component status
kubectl get cs

# Get Information cluster
kubectl cluster-info

# Get version
kubectl version
kubectl version --short


